{
  "version": 3,
  "file": "docOrg.js",
  "sourceRoot": "",
  "sources": [
    "docOrg.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "    define ['./org', 'js-yaml', 'lazy'], (Org, Yaml, Lazy)->\r\n\r\n      {\r\n        Headline\r\n        Source\r\n        HTML\r\n        Keyword\r\n        Drawer\r\n        Meat\r\n        UnknownDeclaration\r\n        Results\r\n        parseOrgMode\r\n        Fragment\r\n      } = Org\r\n\r\n      {\r\n        safeLoad\r\n        load\r\n        dump\r\n      } = Yaml\r\n\r\n      {_: _L} = Lazy\r\n\r\n      class ParsedCodeBlock\r\n        constructor: (block)-> if typeof block == 'string' then @setBlockText block else @init block\r\n        clone: -> new ParsedCodeBlock @block\r\n        getOrg: -> blockOrg @block\r\n        toString: -> \"Parsed:\\n  #{@block.text.replace(/\\n/g, '\\n  ')}\"\r\n        init: (@block)->\r\n          org = blockOrg @block\r\n          if org instanceof Fragment || org instanceof Headline then org = org.children[0]\r\n          @items = getCodeItems org\r\n        setBlockText: (str)->\r\n          if (bl = orgDoc parseOrgMode str.replace /\\r\\n/g, '\\n').length != 1 || bl[0].text != str\r\n            throw new Error \"Bad code block: '#{str}'\"\r\n          bl[0]._id = @block?._id\r\n          @init bl[0]\r\n        spliceItem: (itemName, str)->\r\n          if str && _.last(str) != '\\n' then str += '\\n'\r\n          item = @items[itemName]\r\n          @setBlockText if item then @block.text.substring(0, item.offset) + str + @block.text.substring(item.offset + item.text.length)\r\n          else @block.text + \"#+#{itemName.toUpperCase()}:\\n#{str}\"\r\n        setCodeInfo: (info)->\r\n          {text} = @block\r\n          {source} = @items\r\n          infoStart = source.offset + source.infoPos\r\n          @setBlockText text.substring(0, infoStart) + info + text.substring infoStart + source.info.length\r\n        setCodeAttribute: (name, value)->\r\n          info = @items.source.info ? ''\r\n          @setCodeInfo if @block.codeAttributes?[name.toLowerCase()]?\r\n            m = info.match new RegExp \"^((|.*\\\\S)(\\\\s*))(:#{escapeRegexp name})((\\\\s+[^:]*)?(?=:|$))\", 'i'\r\n            prefix = m.index + m[1].length + m[4].length\r\n            suffix = info.substring prefix + m[5].length\r\n            if suffix then suffix = ' ' + suffix\r\n            if !value? then info.substring(0, m.index + m[2].length) + suffix\r\n            else info.substring(0, prefix) + ' ' + value + suffix\r\n          else if !value? then info\r\n          else info + \" :#{name}\" + (if value then ' ' + value else '')\r\n        setResults: (str)-> @spliceItem 'results', str\r\n        setSource: (str)-> @spliceItem 'source', str\r\n        setError: (str)-> @spliceItem 'error', str\r\n        addResultType: (str)->\r\n          types = @getResultTypes()\r\n          if !(str in types)\r\n            results = @block.codeAttributes?.results\r\n            @setCodeAttribute 'results', if results then \"#{results} #{str}\" else str\r\n        removeResultType: (str)->\r\n          res = @block.codeAttributes?.results\r\n          types = @getResultTypes()\r\n          if str.toLowerCase() in types\r\n            values = res.toLowerCase().split /(\\s+)/\r\n            start = values.indexOf str.toLowerCase()\r\n            end = start + 1\r\n            if start > 0 then start--\r\n            else if end < values.length then end++\r\n            prefix = 0\r\n            for i in [0...start]\r\n              prefix += values[i].length\r\n            len = 0\r\n            for i in [start...end]\r\n              len += values[i].length\r\n              values[i] = false\r\n            @setCodeAttribute 'results', if _.some values\r\n              res.substring(0, prefix) + res.substring(prefix + len)\r\n        setResultView: (viewStr)->\r\n          if viewStr then viewStr = ' ' + viewStr\r\n          res = @block.codeAttributes?.results\r\n          newRes = if m = res.match /\\s*\\bview(\\(.*\\)|\\b)/\r\n            res.substring(0, m.index) + viewStr + res.substring(m.index + m[0].length)\r\n          else if viewStr then res + viewStr\r\n          else res\r\n          @setCodeAttribute 'results', newRes\r\n        setExports: (code, results)->\r\n          @setCodeAttribute 'exports', if !code || !results then (code && 'code') || (results && 'results') || 'none'\r\n        exportsCode: -> @getExports() in ['code', 'both']\r\n        exportsResults: ->  @getExports() in ['results', 'both']\r\n        getExports: -> @block.codeAttributes?.exports?.toLowerCase() || 'both'\r\n        getResultTypes: -> @block.codeAttributes?.results?.toLowerCase().split(' ') ? []\r\n        setDynamic: (state)->\r\n          if @isDynamic() != state\r\n            if state then @addResultType 'dynamic'\r\n            else @removeResultType 'dynamic'\r\n        isDynamic: -> 'dynamic' in @getResultTypes()\r\n        setSourceContent: (newContent)->\r\n          src = @items.source\r\n          @setSource \"#{src.text.substring 0, src.contentPos}#{newContent}#{src.text.substring src.contentPos + src.content.length}\"\r\n        hasExpected: -> @items.expected\r\n        resultsAreExpected: ->\r\n          @items.expected && @items.results && @items.expected.content() == @items.results.content()\r\n        makeResultsExpected: ->\r\n          if @items.results\r\n            newExpected = \":expected:\\n#{@items.results.content()}:end:\\n\"\r\n            item = @items.expected\r\n            @setBlockText if item then @block.text.substring(0, item.offset) + newExpected + @block.text.substring(item.offset + item.text.length)\r\n            else\r\n              source = @items.source\r\n              @block.text.substring(0, source.offset + source.text.length) + newExpected + @block.text.substring(source.offset + source.text.length)\r\n        clearExpected: ->\r\n          if item = @items.expected\r\n            @setBlockText @block.text.substring(0, item.offset) + @block.text.substring(item.offset + item.text.length)\r\n\r\n      escapeRegexp = (str)-> str.replace /[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&'\r\n\r\n      blockOrg = (block)->\r\n        text = if typeof block == 'string' then block else block.text\r\n        org = parseOrgMode text\r\n        org = if org.children.length == 1 then org.children[0]\r\n        else\r\n          frag = new Fragment org.offset, org.children\r\n          frag\r\n        if typeof block == 'object'\r\n          org.nodeId = block._id\r\n          org.shared = block.type\r\n        org.linkNodes()\r\n        org\r\n\r\n      getCodeItems = (org)->\r\n        if !getSourceNodeType org then {}\r\n        else\r\n          result = {}\r\n          while !isSourceEnd org\r\n            if type = getSourceNodeType org\r\n              if type == 'html'\r\n                return if result.first then result\r\n                else source: org, first: org, last: org\r\n              if !result.first then result.first = org\r\n              else if type == 'name' then return result\r\n              if result[type]? then return result\r\n              result.last = result[type] = org\r\n              if type == 'name' && org.next.constructor == Meat && org.next.next instanceof Source then result.doc = org.next\r\n              if type == 'results' then break\r\n            else if org instanceof Drawer || org instanceof Keyword || org instanceof UnknownDeclaration then break\r\n            org = org.next\r\n          if result.source then result else {}\r\n\r\n      isCodeBlock = (org)->\r\n        if org instanceof Keyword && org.name.match /^name$/i\r\n          {first} = getCodeItems org\r\n          first\r\n        else org instanceof Source\r\n\r\n      getSourceNodeType = (org)->\r\n        if org instanceof Source then 'source'\r\n        else if org instanceof HTML then 'html'\r\n        else if org instanceof Results then 'results'\r\n        else if org instanceof Drawer && org.name.toLowerCase() == 'expected' then 'expected'\r\n        else if org instanceof Keyword && org.name.match /^name$/i then 'name'\r\n        else if org instanceof Keyword && org.name.match /^error$/i then 'error'\r\n        else false\r\n\r\n      isSourceEnd = (org)-> !org || org instanceof Headline\r\n\r\n      createDocFromOrg = (org, collection, reloading, filter)->\r\n        doc = orgDoc org\r\n        if filter? then doc = _.map doc, filter\r\n        replaceOrgDoc doc, collection, reloading\r\n        collection\r\n\r\n      docRoot = (collection)->\r\n        (collection.leisure ? collection.leisure = {}).info ? (collection.leisure.info = collection.findOne info: true)\r\n\r\n      replaceOrgDoc = (docArray, collection, reloading)->\r\n        if reloading then collection.remove info: ('$exists': false)\r\n        else collection.remove()\r\n        linkDocs docArray\r\n        #console.log \"DOCS: #{JSON.stringify docArray, null, '  '}\"\r\n        if reloading\r\n          info = collection.leisure.info\r\n          info.head = if docArray.length > 0 then docArray[0]._id else null\r\n          collection.update info._id, info\r\n        else\r\n          info = collection.leisure.info =\r\n            info: true\r\n            head: if docArray.length > 0 then docArray[0]._id else null\r\n            _id: new Meteor.Collection.ObjectID().toJSONValue()\r\n          collection.insert info\r\n        for doc in docArray\r\n          collection.insert doc\r\n\r\n      linkDocs = (docs)->\r\n        prev = null\r\n        for doc in docs\r\n          doc._id = new Meteor.Collection.ObjectID().toJSONValue()\r\n          if prev\r\n            prev.next = doc._id\r\n            doc.prev = prev._id\r\n          prev = doc\r\n\r\n      orgDoc = (org, withProperties)-> createOrgDoc(org, false, withProperties)[0].toArray()\r\n\r\n      lineCodeBlockType = (line)->\r\n        type = line && root.matchLine line\r\n        if type in ['srcStart', 'srcEnd', 'htmlStart', 'htmlEnd'] then 'code'\r\n        else if line.match /^#+name:/i then 'code'\r\n        else if type == 'headline-1' then 'headline'\r\n        else 'chunk'\r\n\r\n      createOrgDoc = (org, local, withProps)->\r\n        next = org.next\r\n        if org instanceof Headline\r\n          local = local || (org.level == 1 && org.properties.local)\r\n          children = createChildrenDocs org, local, withProps\r\n          result = if org.level == 0 then (org.children.length && children) || _L([text: '\\n', type: 'chunk', offset: org.offset])\r\n          else\r\n            _L([text: org.text, type: 'headline', level: org.level, offset: org.offset, properties: org.properties]).concat children\r\n        else if org instanceof HTML then [result, next] = createHtmlBlockDoc org\r\n        else if isCodeBlock org then [result, next] = createCodeBlockDoc org\r\n        else\r\n          block = text: org.allText(), type: 'chunk', offset: org.offset\r\n          if title = findTitle org then block.title = title\r\n          result = _L(checkProps org, [block])\r\n        block = result.last()\r\n        if withProps && block.type == 'code'\r\n          block.properties = org.allProperties()\r\n        if local then result.each (item)-> item.local = true\r\n        [result, next]\r\n\r\n      findTitle = (org)->\r\n        if org instanceof Keyword && org.name.toLowerCase() == 'title'\r\n          return org.info.trim()\r\n        else if org.children\r\n          for child in org.children when title = findTitle child\r\n            return title\r\n\r\n      checkProps = (org, block)->\r\n        if org.isProperties?()\r\n          block.properties = org.properties()\r\n\r\n      createChildrenDocs = (org, local, withProps)->\r\n        children = _L()\r\n        child = org.children[0]\r\n        title = null\r\n        if child\r\n          mergedText = ''\r\n          properties = _L()\r\n          offset = org.children[0].offset\r\n          while child\r\n            if newTitle = findTitle child then title = newTitle\r\n            if isMergeable child\r\n              mergedText += child.allText()\r\n              if child.properties?() then properties = properties.merge child.properties?()\r\n              child = child.next\r\n            else\r\n              [mergedText, properties, children] = checkMerged mergedText, properties, children, offset\r\n              [childDoc, child] = createOrgDoc child, local, withProps\r\n              if title\r\n                (if children.isEmpty() then childDoc else children).first().title = title\r\n                title = null\r\n              children = children.concat [childDoc]\r\n              offset = child?.offset\r\n          [mergedText, properties, children] = checkMerged mergedText, properties, children, offset, title\r\n        children\r\n\r\n      isMergeable = (org)-> !(org instanceof Headline || org instanceof HTML || isCodeBlock org)\r\n\r\n      checkMerged = (mergedText, properties, children, offset, title)->\r\n        if mergedText != ''\r\n          child = text: mergedText, type: 'chunk', offset: offset\r\n          if title then child.title = title\r\n          if !properties.isEmpty() then child.properties = properties.toObject()\r\n          children = children.concat [child]\r\n        ['', _L(), children]\r\n\r\n      createCodeBlockDoc = (org)->\r\n        text = ''\r\n        {first, name, source, last, expected, results} = getCodeItems org\r\n        if !first then [_L([text: org.allText(), type: 'chunk', offset: org.offset]), org.next]\r\n        else\r\n          firstOffset = first.offset\r\n          while first != last.next\r\n            text += first.allText()\r\n            first = first.next\r\n          obj = text: text, type: 'code', offset: firstOffset\r\n          if source.attributes()\r\n            attr = {}\r\n            for nm, val of source.attributes()\r\n              attr[nm.toLowerCase()] = val\r\n          else attr = null\r\n          obj.codeAttributes = attr\r\n          obj.codePrelen = source.contentPos + source.offset - firstOffset\r\n          obj.codePostlen = text.length - obj.codePrelen - source.content.length\r\n          if expected\r\n            obj.codeContent = source.content\r\n            obj.codeTestActual = results.content()\r\n            obj.codeTestExpected = expected.content()\r\n            obj.codeTestResult = if !results then 'unknown'\r\n            else if expected.content() == results.content() then 'pass'\r\n            else 'fail'\r\n          if name then obj.codeName = name.info.trim()\r\n          if obj.codeAttributes?.local? then obj.local = true\r\n          if l = source.lead() then obj.language = l.trim()\r\n          if isYamlResult(obj) || isYaml source\r\n            yamlSrc = (if isYaml(source) && !results then source.content\r\n            else\r\n              obj.computedYaml = true\r\n              results?.content().replace /^: /gm, '')\r\n            if yamlSrc then obj.yaml = parseYaml yamlSrc\r\n          else if isText source then obj.yaml = source.content\r\n          [_L([obj]), last.next]\r\n\r\n      parseYaml = (str)->\r\n        try\r\n          #safeLoad str\r\n          load str\r\n        catch err\r\n          undefined\r\n\r\n      createHtmlBlockDoc = (org)->\r\n          text = org.allText()\r\n          obj = text: text, type: 'code', offset: org.offset\r\n          obj.codePrelen = org.contentPos\r\n          obj.codePostlen = text.length - obj.codePrelen - org.contentLength\r\n          obj.language = 'html'\r\n          if a = org.attributes() then obj.codeAttributes = a\r\n          [_L([obj]), org.next]\r\n\r\n      isYaml = (org)-> org instanceof Source && org.info.match /^ *yaml\\b/i\r\n\r\n      isYamlResult = (block)-> block.codeAttributes?.results?.match(/\\byaml\\b/) || block.codeAttributes?.post\r\n\r\n      isText = (org)-> org instanceof Source && org.info.match /^ *(text|string)\\b/i\r\n\r\n      checkSingleNode = (text)->\r\n        docs = {}\r\n        org = parseOrgMode text\r\n        [docJson] = if org.children.length > 1 then orgDoc org\r\n        else orgDoc org.children[0]\r\n        #if docJson.children? then console.log \"NEW NODE\\n#{JSON.stringify docJson}\"\r\n        docJson\r\n\r\n      crnl = (data)->\r\n        if typeof data == 'string' then data.replace /\\r\\n/g, '\\n'\r\n        else if data.text\r\n          data.text = crnl data.text\r\n          data\r\n        else data\r\n\r\n      blockSource = (block)->\r\n        block && block.text.substring block.codePrelen, block.text.length - block.codePostlen\r\n\r\n      {\r\n        getCodeItems\r\n        isCodeBlock\r\n        createDocFromOrg\r\n        checkSingleNode\r\n        orgDoc\r\n        docRoot\r\n        linkDocs\r\n        isYaml\r\n        isText\r\n        crnl\r\n        lineCodeBlockType\r\n        blockSource\r\n        ParsedCodeBlock\r\n        blockOrg\r\n        parseYaml\r\n      }\r\n"
  ]
}